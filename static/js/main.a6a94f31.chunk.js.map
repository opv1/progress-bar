{"version":3,"sources":["context/types.ts","context/appReducer.ts","utils.ts","context/AppState.tsx","components/ProgressPanel/ProgressPanel.tsx","components/ControlPanel/ControlPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppActionTypes","appReducer","state","action","type","SET_PROGRESS","progress","payload","SET_TIMER","timer","SET_CUSTOM_VALUE","customValue","SET_COLOR","strokeOuter","SET_ANIMATE","animate","SET_DONE_ANIMATE","doneAnimate","SET_ANIMATE_VALUE","animateValue","SET_ANIMATE_TIME","animateTime","SET_HIDE","hide","setTimer","counter","min","Math","floor","sec","initialState","defaultColor","colorArray","size","strokeWidth","strokeInner","AppContext","createContext","AppState","children","useReducer","dispatch","secondsCounter","Provider","value","onCustomValue","integerValue","parseInt","onRandomValue","random","onRandomColor","checked","length","onAnimateValue","onStartAnimate","target","window","intervalId","setInterval","percent","ceil","clearInterval","setTimeout","statusChecked","finalCountdown","startTimer","onHideBlock","ProgressPanel","useContext","useState","offset","setOffset","circleRef","useRef","center","radius","circumference","PI","useEffect","progressOffset","className","style","width","opacity","height","stroke","cx","cy","r","strokeDasharray","strokeDashoffset","ref","transform","x","y","Number","ControlPanel","onChange","event","placeholder","disabled","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6a94f31.chunk.js","sourcesContent":["export type AppState = {\r\n  progress: number\r\n  timer: string\r\n  customValue: string\r\n  defaultColor: string\r\n  colorArray: string[]\r\n  animate: boolean\r\n  doneAnimate: boolean\r\n  animateValue: string\r\n  animateTime: number\r\n  size: number\r\n  strokeWidth: number\r\n  strokeInner: string\r\n  strokeOuter: string\r\n  hide: boolean\r\n}\r\n\r\nexport type AppCntxt = {\r\n  state: AppState\r\n  onCustomValue?: (value: string) => void\r\n  onRandomValue?: () => void\r\n  onRandomColor?: (checked: boolean) => void\r\n  onAnimateValue?: (value: string) => void\r\n  onStartAnimate?: (target: HTMLInputElement) => void\r\n  onHideBlock?: () => void\r\n}\r\n\r\nexport enum AppActionTypes {\r\n  SET_PROGRESS = 'SET_PROGRESS',\r\n  SET_TIMER = 'SET_TIMER',\r\n  SET_CUSTOM_VALUE = 'SET_CUSTOM_VALUE',\r\n  SET_COLOR = 'SET_COLOR',\r\n  SET_ANIMATE = 'SET_ANIMATE',\r\n  SET_DONE_ANIMATE = 'SET_DONE_ANIMATE',\r\n  SET_ANIMATE_VALUE = 'SET_ANIMATE_VALUE',\r\n  SET_ANIMATE_TIME = 'SET_ANIMATE_TIME',\r\n  SET_HIDE = 'SET_HIDE',\r\n}\r\n\r\ninterface ISetProgress {\r\n  type: AppActionTypes.SET_PROGRESS\r\n  payload: number\r\n}\r\n\r\ninterface ISetTimer {\r\n  type: AppActionTypes.SET_TIMER\r\n  payload: string\r\n}\r\n\r\ninterface ISetCustomValue {\r\n  type: AppActionTypes.SET_CUSTOM_VALUE\r\n  payload: string\r\n}\r\n\r\ninterface ISetColor {\r\n  type: AppActionTypes.SET_COLOR\r\n  payload: string\r\n}\r\n\r\ninterface ISetAnimate {\r\n  type: AppActionTypes.SET_ANIMATE\r\n  payload: boolean\r\n}\r\n\r\ninterface ISetAnimateValue {\r\n  type: AppActionTypes.SET_ANIMATE_VALUE\r\n  payload: string\r\n}\r\n\r\ninterface ISetAnimateTime {\r\n  type: AppActionTypes.SET_ANIMATE_TIME\r\n  payload: number\r\n}\r\n\r\ninterface ISetDoneAnimate {\r\n  type: AppActionTypes.SET_DONE_ANIMATE\r\n  payload: boolean\r\n}\r\n\r\ninterface ISetHide {\r\n  type: AppActionTypes.SET_HIDE\r\n}\r\n\r\nexport type AppAction =\r\n  | ISetProgress\r\n  | ISetTimer\r\n  | ISetCustomValue\r\n  | ISetColor\r\n  | ISetAnimate\r\n  | ISetAnimateValue\r\n  | ISetAnimateTime\r\n  | ISetDoneAnimate\r\n  | ISetHide\r\n","import { AppState, AppAction, AppActionTypes } from 'context/types'\r\n\r\nexport const appReducer = (state: AppState, action: AppAction) => {\r\n  switch (action.type) {\r\n    case AppActionTypes.SET_PROGRESS:\r\n      return {\r\n        ...state,\r\n        progress: action.payload,\r\n      }\r\n    case AppActionTypes.SET_TIMER:\r\n      return {\r\n        ...state,\r\n        timer: action.payload,\r\n      }\r\n    case AppActionTypes.SET_CUSTOM_VALUE:\r\n      return {\r\n        ...state,\r\n        customValue: action.payload,\r\n      }\r\n    case AppActionTypes.SET_COLOR:\r\n      return {\r\n        ...state,\r\n        strokeOuter: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE:\r\n      return {\r\n        ...state,\r\n        animate: action.payload,\r\n      }\r\n    case AppActionTypes.SET_DONE_ANIMATE:\r\n      return {\r\n        ...state,\r\n        doneAnimate: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE_VALUE:\r\n      return {\r\n        ...state,\r\n        animateValue: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE_TIME:\r\n      return {\r\n        ...state,\r\n        animateTime: action.payload,\r\n      }\r\n    case AppActionTypes.SET_HIDE:\r\n      return {\r\n        ...state,\r\n        hide: !state.hide,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export const randomColor = (colorArray: string[]) => {\r\n  return colorArray[Math.floor(Math.random() * colorArray.length)]\r\n}\r\n\r\nexport const statusChecked = (target: HTMLInputElement) => {\r\n  target.checked = false\r\n}\r\n\r\nexport const setTimer = (counter: number) => {\r\n  if (counter >= 0) {\r\n    const min = Math.floor(counter / 60)\r\n    const sec = counter % 60 > 9 ? counter % 60 : `0${counter % 60}`\r\n\r\n    return { min, sec }\r\n  }\r\n}\r\n","import React, { createContext, useReducer } from 'react'\r\nimport { appReducer } from 'context/appReducer'\r\nimport { AppCntxt, AppActionTypes } from 'context/types'\r\nimport { randomColor, statusChecked, setTimer } from 'utils'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    intervalId: any\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  progress: 0,\r\n  timer: '0:00',\r\n  customValue: '',\r\n  defaultColor: '#20b7ff',\r\n  colorArray: [\r\n    '#7ea9e1',\r\n    '#ed004f',\r\n    '#00fcf0',\r\n    '#d2fc00',\r\n    '#7bff00',\r\n    '#fa6900',\r\n  ],\r\n  animate: false,\r\n  doneAnimate: false,\r\n  animateValue: '',\r\n  animateTime: 0,\r\n  size: 250,\r\n  strokeWidth: 15,\r\n  strokeInner: '#ffffff',\r\n  strokeOuter: '#20b7ff',\r\n  hide: false,\r\n}\r\n\r\nexport const AppContext = createContext<AppCntxt>({ state: initialState })\r\n\r\ninterface Props {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const AppState: React.FC<Props> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState)\r\n\r\n  let secondsCounter = state.animateTime\r\n\r\n  const onCustomValue = (value: string) => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_CUSTOM_VALUE,\r\n      payload: value,\r\n    })\r\n\r\n    let integerValue = parseInt(value, 10)\r\n\r\n    if (integerValue && integerValue > 0) {\r\n      if (integerValue > 100) {\r\n        integerValue = 100\r\n      }\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: integerValue,\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onRandomValue = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: Math.floor(Math.random() * 101),\r\n    })\r\n    dispatch({\r\n      type: AppActionTypes.SET_CUSTOM_VALUE,\r\n      payload: '',\r\n    })\r\n  }\r\n\r\n  const onRandomColor = (checked: boolean) => {\r\n    if (checked) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_COLOR,\r\n        payload: randomColor(state.colorArray),\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_COLOR,\r\n        payload: state.defaultColor,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onAnimateValue = (value: string) => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_VALUE,\r\n      payload: value,\r\n    })\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_TIME,\r\n      payload: parseInt(value, 10),\r\n    })\r\n\r\n    const timer = setTimer(parseInt(value, 10))\r\n\r\n    if (timer) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_TIMER,\r\n        payload: `${timer.min}:${timer.sec}`,\r\n      })\r\n    }\r\n  }\r\n\r\n  const finalCountdown = (target: any) => {\r\n    secondsCounter--\r\n\r\n    const percent = Math.ceil(\r\n      ((state.animateTime - secondsCounter) / state.animateTime) * 100\r\n    )\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: percent,\r\n    })\r\n\r\n    if (secondsCounter === 0) {\r\n      clearInterval(window.intervalId)\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_DONE_ANIMATE,\r\n        payload: true,\r\n      })\r\n\r\n      return setTimeout(() => {\r\n        statusChecked(target)\r\n\r\n        dispatch({\r\n          type: AppActionTypes.SET_DONE_ANIMATE,\r\n          payload: false,\r\n        })\r\n        dispatch({\r\n          type: AppActionTypes.SET_ANIMATE,\r\n          payload: false,\r\n        })\r\n        dispatch({\r\n          type: AppActionTypes.SET_ANIMATE_VALUE,\r\n          payload: '',\r\n        })\r\n        dispatch({\r\n          type: AppActionTypes.SET_PROGRESS,\r\n          payload: 0,\r\n        })\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  const startTimer = () => {\r\n    const timer = setTimer(secondsCounter)\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_TIMER,\r\n      payload: `${timer!.min}:${timer!.sec}`,\r\n    })\r\n  }\r\n\r\n  const onStartAnimate = (target: any) => {\r\n    if (target.checked) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_ANIMATE,\r\n        payload: true,\r\n      })\r\n      dispatch({\r\n        type: AppActionTypes.SET_CUSTOM_VALUE,\r\n        payload: '',\r\n      })\r\n\r\n      window.intervalId = setInterval(() => {\r\n        finalCountdown(target)\r\n        startTimer()\r\n      }, 1000)\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_ANIMATE,\r\n        payload: false,\r\n      })\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n\r\n      const timer = setTimer(secondsCounter)\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_TIMER,\r\n        payload: `${timer!.min}:${timer!.sec}`,\r\n      })\r\n\r\n      clearInterval(window.intervalId)\r\n    }\r\n  }\r\n\r\n  const onHideBlock = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_HIDE,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        state,\r\n        onCustomValue,\r\n        onRandomValue,\r\n        onRandomColor,\r\n        onAnimateValue,\r\n        onStartAnimate,\r\n        onHideBlock,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext, useState, useRef, useEffect } from 'react'\r\nimport { AppContext } from 'context/AppState'\r\nimport 'components/ProgressPanel/ProgressPanel.scss'\r\n\r\nconst ProgressPanel: React.FC = () => {\r\n  const { state } = useContext(AppContext)\r\n  const [offset, setOffset] = useState<number>(0)\r\n  const circleRef = useRef<SVGCircleElement>(null)\r\n\r\n  const center = state.size / 2\r\n  const radius = state.size / 2 - state.strokeWidth / 2\r\n  const circumference = 2 * Math.PI * radius\r\n\r\n  useEffect(() => {\r\n    const progressOffset = ((100 - state.progress) / 100) * circumference\r\n    setOffset(progressOffset)\r\n  }, [state.progress, circumference, offset, setOffset])\r\n\r\n  return (\r\n    <div className='progress-panel'>\r\n      {state.hide ? (\r\n        <span className='progress-hide' style={{ width: `${state.size}px` }}>\r\n          Progress block is hidden!\r\n        </span>\r\n      ) : (\r\n        <div className='progress-block' style={{ width: `${state.size}px` }}>\r\n          <span\r\n            className='progress-done'\r\n            style={state.doneAnimate ? { opacity: '1' } : {}}\r\n          >\r\n            Done!\r\n          </span>\r\n          <svg className='progress-ring' width={state.size} height={state.size}>\r\n            <circle\r\n              className='progress-ring__inner'\r\n              stroke={state.strokeInner}\r\n              strokeWidth={state.strokeWidth}\r\n              cx={center}\r\n              cy={center}\r\n              r={radius}\r\n            />\r\n            <circle\r\n              className='progress-ring__outer'\r\n              stroke={state.strokeOuter}\r\n              strokeWidth={state.strokeWidth}\r\n              strokeDasharray={circumference}\r\n              strokeDashoffset={offset}\r\n              cx={center}\r\n              cy={center}\r\n              r={radius}\r\n              ref={circleRef}\r\n              transform={`rotate(-90, ${center}, ${center})`}\r\n            />\r\n            <text\r\n              className='progress-ring__percent'\r\n              x={`${center}`}\r\n              y={`${center}`}\r\n            >\r\n              {state.progress}%\r\n            </text>\r\n          </svg>\r\n          <span\r\n            className='progress-timer'\r\n            style={\r\n              state.animateValue && Number(state.animateValue) !== 0\r\n                ? { opacity: '1' }\r\n                : {}\r\n            }\r\n          >\r\n            {state.timer}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressPanel\r\n","import React, { useContext } from 'react'\r\nimport { AppContext } from 'context/AppState'\r\nimport 'components/ControlPanel/ControlPanel.scss'\r\n\r\nconst ControlPanel: React.FC = () => {\r\n  const {\r\n    state,\r\n    onCustomValue,\r\n    onRandomValue,\r\n    onRandomColor,\r\n    onAnimateValue,\r\n    onStartAnimate,\r\n    onHideBlock,\r\n  } = useContext(AppContext)\r\n\r\n  return (\r\n    <form className='control-panel'>\r\n      <label className='control-label'>\r\n        <input\r\n          className='control-label__input'\r\n          onChange={(event) => onCustomValue!(event.target.value)}\r\n          value={state.customValue}\r\n          type='number'\r\n          placeholder='0'\r\n          disabled={state.animate || state.hide}\r\n        />\r\n        Custom value\r\n      </label>\r\n      <div className='control-block'>\r\n        <button\r\n          className='control-block__button'\r\n          onClick={onRandomValue}\r\n          disabled={state.animate || state.hide}\r\n        ></button>\r\n      </div>\r\n      <label className='control-label'>\r\n        <input\r\n          onChange={(event) => onRandomColor!(event.target.checked)}\r\n          type='checkbox'\r\n          disabled={state.hide}\r\n        />\r\n        Random color\r\n      </label>\r\n      <div className='control-block'>\r\n        <label className='control-label'>\r\n          <input\r\n            className='control-label__input'\r\n            onChange={(event) => onAnimateValue!(event.target.value)}\r\n            value={state.animateValue}\r\n            type='number'\r\n            placeholder='0'\r\n            disabled={state.animate || state.hide}\r\n          />\r\n          Seconds\r\n        </label>\r\n        <label className='control-label'>\r\n          <input\r\n            onChange={(event) => onStartAnimate!(event.target)}\r\n            type='checkbox'\r\n            disabled={\r\n              !state.animateValue ||\r\n              Number(state.animateValue) === 0 ||\r\n              state.hide\r\n            }\r\n          />\r\n          Animate\r\n        </label>\r\n      </div>\r\n      <label className='control-label'>\r\n        <input\r\n          onChange={onHideBlock}\r\n          type='checkbox'\r\n          disabled={state.animate}\r\n        />\r\n        Hide progress panel\r\n      </label>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React from 'react'\nimport ProgressPanel from 'components/ProgressPanel/ProgressPanel'\nimport ControlPanel from 'components/ControlPanel/ControlPanel'\nimport 'App.scss'\n\nconst App: React.FC = () => {\n  return (\n    <div className='app'>\n      <ProgressPanel />\n      <ControlPanel />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppState } from 'context/AppState'\nimport App from 'App'\nimport reportWebVitals from 'reportWebVitals'\nimport 'index.scss'\n\nReactDOM.render(\n  <AppState>\n    <App />\n  </AppState>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}