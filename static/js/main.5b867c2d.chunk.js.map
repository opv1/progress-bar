{"version":3,"sources":["context/types.ts","context/appReducer.ts","utils.ts","context/AppState.tsx","styles/globalStyles.ts","components/Progress.tsx","components/UI/Button.tsx","components/UI/Label.tsx","components/UI/Input.tsx","components/Control.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppActionTypes","appReducer","state","action","type","SET_THEME","theme","payload","SET_PROGRESS","progress","SET_TIME","timer","SET_CUSTOM_VALUE","customValue","SET_COLOR","strokeOuter","SET_START_ANIMATE","startAnimate","SET_DONE_ANIMATE","doneAnimate","SET_ANIMATE_VALUE","animateValue","SET_ANIMATE_TIME","animateTime","SET_HIDE_PROGRESS","hideProgress","getParseInt","value","parseInt","initialState","sizeRing","strokeWidth","strokeInner","defaultColor","colorArray","toggleTheme","onCustomValue","onRandomValue","onRandomColor","onAnimateValue","onStartAnimate","onHideProgress","finalCountdown","resetProgress","AppContext","createContext","AppProvider","children","useReducer","dispatch","setTime","counter","time","min","Math","floor","sec","Provider","integerValue","random","checked","length","startPoint","ceil","GlobalStyles","createGlobalStyle","normalize","primaryColor","darkTheme","secondaryColor","activeColor","darkColor","textColor","complexShadow","lightShadow","activeShadow","linearGradient","lightTheme","Progress","useState","offset","setOffset","useContext","center","radius","circumference","PI","useEffect","ProgressWrapper","style","opacity","ProgressBlock","width","ProgressDone","ProgressRing","height","ProgressInner","stroke","cx","cy","r","ProgressOuter","strokeDasharray","strokeDashoffset","transform","ProgressPercent","x","y","ProgressTimer","Number","styled","div","span","svg","circle","text","Button","props","ButtonWrapper","button","Label","title","LabelWrapper","label","Input","InputWrapper","input","css","Control","window","intervalId","setInterval","clearInterval","timeoutId","setTimeout","clearTimeout","ControlWrapper","onChange","event","target","placeholder","disabled","ControlBlock","onClick","App","AppWrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b867c2d.chunk.js","sourcesContent":["export type AppState = {\r\n  theme: string\r\n  progress: number\r\n  timer: string\r\n  customValue: string\r\n  startAnimate: boolean\r\n  doneAnimate: boolean\r\n  animateValue: string\r\n  animateTime: number\r\n  hideProgress: boolean\r\n  sizeRing: number\r\n  strokeWidth: number\r\n  strokeInner: string\r\n  strokeOuter: string\r\n  defaultColor: string\r\n  colorArray: string[]\r\n  toggleTheme: () => void\r\n  onCustomValue: (value: string) => void\r\n  onRandomValue: () => void\r\n  onRandomColor: (checked: boolean) => void\r\n  onAnimateValue: (value: string) => void\r\n  onStartAnimate: (checked: boolean) => void\r\n  onHideProgress: () => void\r\n  finalCountdown: () => void\r\n  resetProgress: () => void\r\n}\r\n\r\nexport enum AppActionTypes {\r\n  SET_THEME = 'SET_THEME',\r\n  SET_PROGRESS = 'SET_PROGRESS',\r\n  SET_TIME = 'SET_TIME',\r\n  SET_CUSTOM_VALUE = 'SET_CUSTOM_VALUE',\r\n  SET_COLOR = 'SET_COLOR',\r\n  SET_START_ANIMATE = 'SET_START_ANIMATE',\r\n  SET_DONE_ANIMATE = 'SET_DONE_ANIMATE',\r\n  SET_ANIMATE_VALUE = 'SET_ANIMATE_VALUE',\r\n  SET_ANIMATE_TIME = 'SET_ANIMATE_TIME',\r\n  SET_HIDE_PROGRESS = 'SET_HIDE_PROGRESS',\r\n}\r\n\r\ninterface ISetTheme {\r\n  type: AppActionTypes.SET_THEME\r\n  payload: string\r\n}\r\n\r\ninterface ISetProgress {\r\n  type: AppActionTypes.SET_PROGRESS\r\n  payload: number\r\n}\r\n\r\ninterface ISetTimer {\r\n  type: AppActionTypes.SET_TIME\r\n  payload: string\r\n}\r\n\r\ninterface ISetCustomValue {\r\n  type: AppActionTypes.SET_CUSTOM_VALUE\r\n  payload: string\r\n}\r\n\r\ninterface ISetColor {\r\n  type: AppActionTypes.SET_COLOR\r\n  payload: string\r\n}\r\n\r\ninterface ISetAnimate {\r\n  type: AppActionTypes.SET_START_ANIMATE\r\n  payload: boolean\r\n}\r\n\r\ninterface ISetAnimateValue {\r\n  type: AppActionTypes.SET_ANIMATE_VALUE\r\n  payload: string\r\n}\r\n\r\ninterface ISetAnimateTime {\r\n  type: AppActionTypes.SET_ANIMATE_TIME\r\n  payload: number\r\n}\r\n\r\ninterface ISetDoneAnimate {\r\n  type: AppActionTypes.SET_DONE_ANIMATE\r\n  payload: boolean\r\n}\r\n\r\ninterface ISetHide {\r\n  type: AppActionTypes.SET_HIDE_PROGRESS\r\n}\r\n\r\nexport type AppAction =\r\n  | ISetTheme\r\n  | ISetProgress\r\n  | ISetTimer\r\n  | ISetCustomValue\r\n  | ISetColor\r\n  | ISetAnimate\r\n  | ISetAnimateValue\r\n  | ISetAnimateTime\r\n  | ISetDoneAnimate\r\n  | ISetHide\r\n","import { AppState, AppAction, AppActionTypes } from 'context/types'\r\n\r\nexport const appReducer = (state: AppState, action: AppAction): AppState => {\r\n  switch (action.type) {\r\n    case AppActionTypes.SET_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.payload,\r\n      }\r\n    case AppActionTypes.SET_PROGRESS:\r\n      return {\r\n        ...state,\r\n        progress: action.payload,\r\n      }\r\n    case AppActionTypes.SET_TIME:\r\n      return {\r\n        ...state,\r\n        timer: action.payload,\r\n      }\r\n    case AppActionTypes.SET_CUSTOM_VALUE:\r\n      return {\r\n        ...state,\r\n        customValue: action.payload,\r\n      }\r\n    case AppActionTypes.SET_COLOR:\r\n      return {\r\n        ...state,\r\n        strokeOuter: action.payload,\r\n      }\r\n    case AppActionTypes.SET_START_ANIMATE:\r\n      return {\r\n        ...state,\r\n        startAnimate: action.payload,\r\n      }\r\n    case AppActionTypes.SET_DONE_ANIMATE:\r\n      return {\r\n        ...state,\r\n        doneAnimate: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE_VALUE:\r\n      return {\r\n        ...state,\r\n        animateValue: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE_TIME:\r\n      return {\r\n        ...state,\r\n        animateTime: action.payload,\r\n      }\r\n    case AppActionTypes.SET_HIDE_PROGRESS:\r\n      return {\r\n        ...state,\r\n        hideProgress: !state.hideProgress,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export const getRandomColor = (colorArray: string[]) => {\r\n  return colorArray[Math.floor(Math.random() * colorArray.length)]\r\n}\r\n\r\nexport const getParseInt = (value: string) => {\r\n  return parseInt(value, 10)\r\n}\r\n\r\nexport const getTime = (counter: number) => {\r\n  const min = Math.floor(counter / 60)\r\n  const sec = counter % 60 > 9 ? counter % 60 : `0${counter % 60}`\r\n\r\n  return { min, sec }\r\n}\r\n","import React, { createContext, useReducer } from 'react'\r\nimport { appReducer } from 'context/appReducer'\r\nimport { AppState, AppActionTypes } from 'context/types'\r\nimport { getRandomColor, getParseInt, getTime } from 'utils'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    intervalId: any\r\n    timeoutId: any\r\n  }\r\n}\r\n\r\nconst initialState: AppState = {\r\n  theme: 'dark',\r\n  progress: 0,\r\n  timer: '0:00',\r\n  customValue: '',\r\n  startAnimate: false,\r\n  doneAnimate: false,\r\n  animateValue: '',\r\n  animateTime: 0,\r\n  hideProgress: false,\r\n  sizeRing: 250,\r\n  strokeWidth: 15,\r\n  strokeInner: '#fff',\r\n  strokeOuter: '#20b7ff',\r\n  defaultColor: '#20b7ff',\r\n  colorArray: [\r\n    '#7ea9e1',\r\n    '#ed004f',\r\n    '#00fcf0',\r\n    '#d2fc00',\r\n    '#7bff00',\r\n    '#fa6900',\r\n  ],\r\n  toggleTheme: () => null,\r\n  onCustomValue: () => null,\r\n  onRandomValue: () => null,\r\n  onRandomColor: () => null,\r\n  onAnimateValue: () => null,\r\n  onStartAnimate: () => null,\r\n  onHideProgress: () => null,\r\n  finalCountdown: () => null,\r\n  resetProgress: () => null,\r\n}\r\n\r\nexport const AppContext = createContext<AppState>({ ...initialState })\r\n\r\ninterface Provider {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const AppProvider: React.FC<Provider> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState)\r\n\r\n  const toggleTheme = () => {\r\n    state.theme === 'dark'\r\n      ? dispatch({\r\n          type: AppActionTypes.SET_THEME,\r\n          payload: 'light',\r\n        })\r\n      : dispatch({\r\n          type: AppActionTypes.SET_THEME,\r\n          payload: 'dark',\r\n        })\r\n  }\r\n\r\n  const onCustomValue = (value: string) => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_CUSTOM_VALUE,\r\n      payload: value,\r\n    })\r\n\r\n    let integerValue = getParseInt(value)\r\n\r\n    if (integerValue && integerValue > 0) {\r\n      if (integerValue > 100) {\r\n        integerValue = 100\r\n      }\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: integerValue,\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onRandomValue = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_CUSTOM_VALUE,\r\n      payload: '',\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: Math.floor(Math.random() * 101),\r\n    })\r\n  }\r\n\r\n  const onRandomColor = (checked: boolean) => {\r\n    if (checked) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_COLOR,\r\n        payload: getRandomColor(state.colorArray),\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_COLOR,\r\n        payload: state.defaultColor,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onAnimateValue = (value: string) => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_VALUE,\r\n      payload: value,\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_TIME,\r\n      payload: getParseInt(value),\r\n    })\r\n\r\n    if (value) {\r\n      setTime(getParseInt(value))\r\n    } else {\r\n      setTime(0)\r\n    }\r\n  }\r\n\r\n  const onStartAnimate = (checked: boolean) => {\r\n    if (checked) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_CUSTOM_VALUE,\r\n        payload: '',\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_START_ANIMATE,\r\n        payload: true,\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_ANIMATE_TIME,\r\n        payload: getParseInt(state.animateValue),\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_START_ANIMATE,\r\n        payload: false,\r\n      })\r\n\r\n      setTime(getParseInt(state.animateValue))\r\n    }\r\n  }\r\n\r\n  const onHideProgress = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_HIDE_PROGRESS,\r\n    })\r\n  }\r\n\r\n  const setTime = (value: number) => {\r\n    const time = getTime(value)\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_TIME,\r\n      payload: `${time.min}:${time.sec}`,\r\n    })\r\n  }\r\n\r\n  const finalCountdown = () => {\r\n    const startPoint = getParseInt(state.animateValue)\r\n    let counter = state.animateTime - 1\r\n    const progress = Math.ceil(((startPoint - counter) / startPoint) * 100)\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: progress,\r\n    })\r\n\r\n    setTime(counter)\r\n\r\n    if (counter === 0) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_DONE_ANIMATE,\r\n        payload: true,\r\n      })\r\n    }\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_TIME,\r\n      payload: counter,\r\n    })\r\n  }\r\n\r\n  const resetProgress = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: 0,\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_VALUE,\r\n      payload: '',\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_START_ANIMATE,\r\n      payload: false,\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_DONE_ANIMATE,\r\n      payload: false,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        ...state,\r\n        toggleTheme,\r\n        onCustomValue,\r\n        onRandomValue,\r\n        onRandomColor,\r\n        onAnimateValue,\r\n        onStartAnimate,\r\n        onHideProgress,\r\n        resetProgress,\r\n        finalCountdown,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\nimport { normalize } from 'styled-normalize'\r\n\r\ntype ThemeType = {\r\n  [key: string]: string\r\n}\r\n\r\ninterface GlobalStylesProps {\r\n  theme: ThemeType\r\n}\r\n\r\nexport const GlobalStyles = createGlobalStyle<GlobalStylesProps>`\r\n  ${normalize}\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Roboto Mono', 'Arial', 'Helvetica', sans-serif;\r\n    background: ${({ theme }) => theme.primaryColor};\r\n    content-visibility: auto;\r\n  }\r\n\r\n  #root {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-width: 320px;\r\n    min-height: 100vh;\r\n  }\r\n`\r\n\r\nexport const darkTheme = {\r\n  primaryColor: '#313131',\r\n  secondaryColor: '#414141',\r\n  activeColor: '#20b7ff',\r\n  darkColor: '#111',\r\n  textColor: '#fff',\r\n  complexShadow:\r\n    '-5px -5px 20px rgba(255, 255, 255, 0.1), 5px 5px 10px rgba(0, 0, 0, 1), inset -2px -2px 5px rgba(255, 255, 255, 0.1), inset 2px 2px 5px rgba(0, 0, 0, 0.5), 0 0 0 2px #1f1f1f',\r\n  lightShadow: '0 0 0 1px #232323',\r\n  activeShadow: '0 0 5px #20b7ff, 0 0 15px #20b7ff, 0 0 30px #20b7ff',\r\n  linearGradient: 'linear-gradient(to top, #000, #555)',\r\n}\r\n\r\nexport const lightTheme = {\r\n  primaryColor: '#c4c4c4',\r\n  secondaryColor: '#e2e2e2',\r\n  activeColor: '#ffef08',\r\n  darkColor: '#111',\r\n  textColor: '#000',\r\n  complexShadow:\r\n    '-5px -5px 20px rgba(255, 255, 255, 0.1), 5px 5px 10px rgba(0, 0, 0, 1), inset -2px -2px 5px rgba(255, 255, 255, 0.1), inset 2px 2px 5px rgba(0, 0, 0, 0.5), 0 0 0 2px #1f1f1f',\r\n  lightShadow: '0 0 0 1px #232323',\r\n  activeShadow: '0 0 5px #ffef08, 0 0 15px #ffef08, 0 0 30px #ffef08',\r\n  linearGradient: 'linear-gradient(to top, #fff, #bfbfbf)',\r\n}\r\n","import React, { useEffect, useContext, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { AppContext } from 'context/AppState'\r\n\r\nconst Progress: React.FC = () => {\r\n  const [offset, setOffset] = useState<number>(0)\r\n  const {\r\n    progress,\r\n    timer,\r\n    doneAnimate,\r\n    animateValue,\r\n    sizeRing,\r\n    strokeInner,\r\n    strokeOuter,\r\n    strokeWidth,\r\n    hideProgress,\r\n  } = useContext(AppContext)\r\n\r\n  const center = sizeRing / 2\r\n  const radius = sizeRing / 2 - strokeWidth / 2\r\n  const circumference = 2 * Math.PI * radius\r\n\r\n  useEffect(() => {\r\n    const progressOffset = ((100 - progress) / 100) * circumference\r\n    setOffset(progressOffset)\r\n  }, [progress, circumference, offset, setOffset])\r\n\r\n  return (\r\n    <ProgressWrapper style={hideProgress ? { opacity: '0' } : {}}>\r\n      <ProgressBlock style={{ width: `${sizeRing}px` }}>\r\n        <ProgressDone style={doneAnimate ? { opacity: '1' } : {}}>\r\n          Done!\r\n        </ProgressDone>\r\n        <ProgressRing width={sizeRing} height={sizeRing}>\r\n          <ProgressInner\r\n            stroke={strokeInner}\r\n            strokeWidth={strokeWidth}\r\n            cx={center}\r\n            cy={center}\r\n            r={radius}\r\n          />\r\n          <ProgressOuter\r\n            stroke={strokeOuter}\r\n            strokeWidth={strokeWidth}\r\n            strokeDasharray={circumference}\r\n            strokeDashoffset={offset}\r\n            cx={center}\r\n            cy={center}\r\n            r={radius}\r\n            transform={`rotate(-90, ${center}, ${center})`}\r\n          />\r\n          <ProgressPercent x={`${center}`} y={`${center}`}>\r\n            {progress}%\r\n          </ProgressPercent>\r\n        </ProgressRing>\r\n        <ProgressTimer\r\n          style={\r\n            animateValue && Number(animateValue) !== 0 ? { opacity: '1' } : {}\r\n          }\r\n        >\r\n          {timer}\r\n        </ProgressTimer>\r\n      </ProgressBlock>\r\n    </ProgressWrapper>\r\n  )\r\n}\r\n\r\nexport default Progress\r\n\r\nconst ProgressWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 1rem;\r\n  opacity: 1;\r\n  transition: opacity 0.5s;\r\n`\r\n\r\nconst ProgressBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst ProgressDone = styled.span`\r\n  font-size: 2rem;\r\n  color: ${({ theme }) => theme.textColor};\r\n  opacity: 0;\r\n  transition: opacity 0.5s;\r\n`\r\n\r\nconst ProgressRing = styled.svg`\r\n  display: block;\r\n  margin: 20px auto;\r\n  max-width: 100%;\r\n`\r\n\r\nconst ProgressInner = styled.circle`\r\n  fill: none;\r\n`\r\n\r\nconst ProgressOuter = styled.circle`\r\n  fill: none;\r\n  transition: stroke-dashoffset 850ms ease-in-out;\r\n`\r\n\r\nconst ProgressPercent = styled.text`\r\n  font-weight: 700;\r\n  font-size: 2rem;\r\n  fill: ${({ theme }) => theme.textColor};\r\n  text-anchor: middle;\r\n`\r\n\r\nconst ProgressTimer = styled.span`\r\n  font-size: 2rem;\r\n  color: ${({ theme }) => theme.textColor};\r\n  opacity: 0;\r\n  transition: opacity 0.5s;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ButtonProps {\r\n  onClick: () => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = (props) => {\r\n  return <ButtonWrapper {...props}></ButtonWrapper>\r\n}\r\n\r\nexport default Button\r\n\r\nconst ButtonWrapper = styled.button`\r\n  position: relative;\r\n  margin: 1rem;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 20px;\r\n  width: 120px;\r\n  height: 40px;\r\n  box-shadow: ${({ theme }) => theme.complexShadow};\r\n  color: ${({ theme }) => theme.textColor};\r\n  background: ${({ theme }) => theme.darkColor};\r\n  transition: opacity 0.5s;\r\n  cursor: pointer;\r\n\r\n  &::before {\r\n    content: 'Random';\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 20px;\r\n    width: 100%;\r\n    height: 40px;\r\n    box-shadow: ${({ theme }) => theme.lightShadow};\r\n    font-size: 1rem;\r\n    background: ${({ theme }) => theme.linearGradient};\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface LabelProps {\r\n  title: string\r\n}\r\n\r\nconst Label: React.FC<LabelProps> = ({ children, title }) => {\r\n  return (\r\n    <LabelWrapper>\r\n      {children}\r\n      {title}\r\n    </LabelWrapper>\r\n  )\r\n}\r\n\r\nexport default Label\r\n\r\nconst LabelWrapper = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0.5rem;\r\n  color: ${({ theme }) => theme.textColor};\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n","import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\ninterface InputProps {\r\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n  type: string\r\n  value?: string\r\n  placeholder?: string\r\n  checked?: boolean\r\n  disabled?: boolean\r\n}\r\n\r\nconst Input: React.FC<InputProps> = (props) => {\r\n  return <InputWrapper {...props} />\r\n}\r\n\r\nexport default Input\r\n\r\nconst InputWrapper = styled.input<{ type: string }>`\r\n  margin: 0.5rem;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 20px;\r\n  width: 120px;\r\n  height: 40px;\r\n  box-shadow: ${({ theme }) => theme.complexShadow};\r\n  font-size: 1.5rem;\r\n  text-align: center;\r\n  color: ${({ theme }) => theme.textColor};\r\n  background: ${({ theme }) => theme.linearGradient};\r\n  transition: opacity 0.5s;\r\n\r\n  ${(props) =>\r\n    props.type === 'number' &&\r\n    css`\r\n      appearance: textfield;\r\n\r\n      &::-webkit-outer-spin-button,\r\n      &::-webkit-inner-spin-button {\r\n        appearance: none;\r\n        margin: 0;\r\n      }\r\n\r\n      &:focus,\r\n      &:hover {\r\n        appearance: number-input;\r\n      }\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.type === 'checkbox' &&\r\n    css`\r\n      appearance: none;\r\n      position: relative;\r\n      background: ${({ theme }) => theme.darkColor};\r\n      transition: 0.5s;\r\n      cursor: pointer;\r\n\r\n      &::before {\r\n        content: '';\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        border-radius: 20px;\r\n        width: 80px;\r\n        height: 40px;\r\n        box-shadow: ${({ theme }) => theme.lightShadow};\r\n        background: ${({ theme }) => theme.linearGradient};\r\n        transform: scale(0.98, 0.96);\r\n        transition: 0.5s;\r\n      }\r\n\r\n      &::after {\r\n        content: '';\r\n        position: absolute;\r\n        left: 65px;\r\n        top: calc(50% - 2px);\r\n        border-radius: 50%;\r\n        width: 4px;\r\n        height: 4px;\r\n        background: #555;\r\n        transition: 0.5s;\r\n      }\r\n\r\n      &:checked {\r\n        background: ${({ theme }) => theme.activeColor};\r\n      }\r\n\r\n      &:checked::before {\r\n        left: 40px;\r\n      }\r\n\r\n      &:checked::after {\r\n        left: calc(65px + 40px);\r\n        box-shadow: ${({ theme }) => theme.activeShadow};\r\n        background: ${({ theme }) => theme.activeColor};\r\n      }\r\n    `}\r\n\r\n  &:disabled {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n","import React, { useContext, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { AppContext } from 'context/AppState'\r\nimport Button from 'components/UI/Button'\r\nimport Label from 'components/UI/Label'\r\nimport Input from 'components/UI/Input'\r\n\r\nconst Control: React.FC = () => {\r\n  const {\r\n    theme,\r\n    customValue,\r\n    startAnimate,\r\n    animateValue,\r\n    animateTime,\r\n    hideProgress,\r\n    doneAnimate,\r\n    toggleTheme,\r\n    onCustomValue,\r\n    onRandomValue,\r\n    onRandomColor,\r\n    onAnimateValue,\r\n    onStartAnimate,\r\n    onHideProgress,\r\n    finalCountdown,\r\n    resetProgress,\r\n  } = useContext(AppContext)\r\n\r\n  useEffect(() => {\r\n    if (startAnimate && animateTime !== 0) {\r\n      window.intervalId = setInterval(() => {\r\n        finalCountdown()\r\n      }, 1000)\r\n    } else {\r\n      clearInterval(window.intervalId)\r\n    }\r\n\r\n    return () => clearInterval(window.intervalId)\r\n    // eslint-disable-next-line\r\n  }, [startAnimate, animateTime])\r\n\r\n  useEffect(() => {\r\n    if (doneAnimate) {\r\n      window.timeoutId = setTimeout(() => {\r\n        resetProgress()\r\n      }, 3000)\r\n    } else {\r\n      clearTimeout(window.timeoutId)\r\n    }\r\n\r\n    return () => clearTimeout(window.timeoutId)\r\n    // eslint-disable-next-line\r\n  }, [doneAnimate])\r\n\r\n  return (\r\n    <ControlWrapper>\r\n      <Label title='Custom value'>\r\n        <Input\r\n          onChange={(event) => onCustomValue(event.target.value)}\r\n          value={customValue}\r\n          type='number'\r\n          placeholder='0'\r\n          disabled={startAnimate || hideProgress}\r\n        />\r\n      </Label>\r\n      <ControlBlock>\r\n        <Button\r\n          onClick={onRandomValue}\r\n          disabled={startAnimate || hideProgress}\r\n        />\r\n      </ControlBlock>\r\n      <Label title='Random color'>\r\n        <Input\r\n          onChange={(event) => onRandomColor(event.target.checked)}\r\n          type='checkbox'\r\n          disabled={hideProgress}\r\n        />\r\n      </Label>\r\n      <ControlBlock>\r\n        <Label title='Seconds'>\r\n          <Input\r\n            onChange={(event) => onAnimateValue(event.target.value)}\r\n            value={animateValue}\r\n            type='number'\r\n            placeholder='0'\r\n            disabled={startAnimate || hideProgress}\r\n          />\r\n        </Label>\r\n        <Label title='Animate'>\r\n          <Input\r\n            onChange={(event) => onStartAnimate(event.target.checked)}\r\n            type='checkbox'\r\n            checked={startAnimate}\r\n            disabled={\r\n              !animateValue || Number(animateValue) === 0 || hideProgress\r\n            }\r\n          />\r\n        </Label>\r\n      </ControlBlock>\r\n      <Label title='Hide progress'>\r\n        <Input\r\n          onChange={onHideProgress}\r\n          type='checkbox'\r\n          checked={hideProgress}\r\n          disabled={startAnimate}\r\n        />\r\n      </Label>\r\n      <Label title='Theme'>\r\n        <Input\r\n          onChange={toggleTheme}\r\n          type='checkbox'\r\n          checked={theme === 'light'}\r\n        />\r\n      </Label>\r\n    </ControlWrapper>\r\n  )\r\n}\r\n\r\nexport default Control\r\n\r\nconst ControlWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 1rem;\r\n`\r\n\r\nconst ControlBlock = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n`\r\n","import React, { useContext } from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport { GlobalStyles, darkTheme, lightTheme } from 'styles/globalStyles'\nimport { AppContext } from 'context/AppState'\nimport Progress from 'components/Progress'\nimport Control from 'components/Control'\n\nconst App: React.FC = () => {\n  const { theme } = useContext(AppContext)\n\n  return (\n    <ThemeProvider theme={theme === 'dark' ? darkTheme : lightTheme}>\n      <GlobalStyles />\n      <AppWrapper>\n        <Progress />\n        <Control />\n      </AppWrapper>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n\nconst AppWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-around;\n  margin: 2rem;\n  border-radius: 50px;\n  width: 100%;\n  min-height: 750px;\n  max-width: 1440px;\n  box-shadow: ${({ theme }) => theme.complexShadow};\n  background: ${({ theme }) => theme.secondaryColor};\n`\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import ReactDOM from 'react-dom'\nimport { AppProvider } from 'context/AppState'\nimport App from 'App'\nimport reportWebVitals from 'reportWebVitals'\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}