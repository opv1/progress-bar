{"version":3,"sources":["context/types.ts","context/appReducer.ts","utils.ts","context/AppState.tsx","components/ProgressPanel/ProgressPanel.tsx","components/ControlPanel/ControlPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppActionTypes","appReducer","state","action","type","SET_PROGRESS","progress","payload","SET_TIME","timer","SET_CUSTOM_VALUE","customValue","SET_COLOR","strokeOuter","SET_START_ANIMATE","startAnimate","SET_DONE_ANIMATE","doneAnimate","SET_ANIMATE_VALUE","animateValue","SET_ANIMATE_TIME","animateTime","SET_HIDE_PROGRESS","hideProgress","getParseInt","value","parseInt","initialState","sizeRing","strokeWidth","strokeInner","defaultColor","colorArray","AppContext","createContext","AppProvider","children","useReducer","dispatch","setTime","counter","time","min","Math","floor","sec","Provider","onCustomValue","integerValue","onRandomValue","random","onRandomColor","checked","length","onAnimateValue","onStartAnimate","onHideProgress","resetProgress","finalCountdown","startPoint","ceil","ProgressPanel","useState","offset","setOffset","useContext","center","radius","circumference","PI","useEffect","className","style","width","opacity","height","stroke","cx","cy","r","strokeDasharray","strokeDashoffset","transform","x","y","Number","ControlPanel","window","intervalId","setInterval","clearInterval","timeoutId","setTimeout","clearTimeout","onChange","event","target","placeholder","disabled","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62bd963a.chunk.js","sourcesContent":["export type AppState = {\r\n  progress: number\r\n  timer: string\r\n  customValue: string\r\n  startAnimate: boolean\r\n  doneAnimate: boolean\r\n  animateValue: string\r\n  animateTime: number\r\n  hideProgress: boolean\r\n  sizeRing: number\r\n  strokeWidth: number\r\n  strokeInner: string\r\n  strokeOuter: string\r\n  defaultColor: string\r\n  colorArray: string[]\r\n}\r\n\r\nexport enum AppActionTypes {\r\n  SET_PROGRESS = 'SET_PROGRESS',\r\n  SET_TIME = 'SET_TIME',\r\n  SET_CUSTOM_VALUE = 'SET_CUSTOM_VALUE',\r\n  SET_COLOR = 'SET_COLOR',\r\n  SET_START_ANIMATE = 'SET_START_ANIMATE',\r\n  SET_DONE_ANIMATE = 'SET_DONE_ANIMATE',\r\n  SET_ANIMATE_VALUE = 'SET_ANIMATE_VALUE',\r\n  SET_ANIMATE_TIME = 'SET_ANIMATE_TIME',\r\n  SET_HIDE_PROGRESS = 'SET_HIDE_PROGRESS',\r\n}\r\n\r\ninterface ISetProgress {\r\n  type: AppActionTypes.SET_PROGRESS\r\n  payload: number\r\n}\r\n\r\ninterface ISetTimer {\r\n  type: AppActionTypes.SET_TIME\r\n  payload: string\r\n}\r\n\r\ninterface ISetCustomValue {\r\n  type: AppActionTypes.SET_CUSTOM_VALUE\r\n  payload: string\r\n}\r\n\r\ninterface ISetColor {\r\n  type: AppActionTypes.SET_COLOR\r\n  payload: string\r\n}\r\n\r\ninterface ISetAnimate {\r\n  type: AppActionTypes.SET_START_ANIMATE\r\n  payload: boolean\r\n}\r\n\r\ninterface ISetAnimateValue {\r\n  type: AppActionTypes.SET_ANIMATE_VALUE\r\n  payload: string\r\n}\r\n\r\ninterface ISetAnimateTime {\r\n  type: AppActionTypes.SET_ANIMATE_TIME\r\n  payload: number\r\n}\r\n\r\ninterface ISetDoneAnimate {\r\n  type: AppActionTypes.SET_DONE_ANIMATE\r\n  payload: boolean\r\n}\r\n\r\ninterface ISetHide {\r\n  type: AppActionTypes.SET_HIDE_PROGRESS\r\n}\r\n\r\nexport type AppAction =\r\n  | ISetProgress\r\n  | ISetTimer\r\n  | ISetCustomValue\r\n  | ISetColor\r\n  | ISetAnimate\r\n  | ISetAnimateValue\r\n  | ISetAnimateTime\r\n  | ISetDoneAnimate\r\n  | ISetHide\r\n","import { AppState, AppAction, AppActionTypes } from 'context/types'\r\n\r\nexport const appReducer = (state: AppState, action: AppAction): AppState => {\r\n  switch (action.type) {\r\n    case AppActionTypes.SET_PROGRESS:\r\n      return {\r\n        ...state,\r\n        progress: action.payload,\r\n      }\r\n    case AppActionTypes.SET_TIME:\r\n      return {\r\n        ...state,\r\n        timer: action.payload,\r\n      }\r\n    case AppActionTypes.SET_CUSTOM_VALUE:\r\n      return {\r\n        ...state,\r\n        customValue: action.payload,\r\n      }\r\n    case AppActionTypes.SET_COLOR:\r\n      return {\r\n        ...state,\r\n        strokeOuter: action.payload,\r\n      }\r\n    case AppActionTypes.SET_START_ANIMATE:\r\n      return {\r\n        ...state,\r\n        startAnimate: action.payload,\r\n      }\r\n    case AppActionTypes.SET_DONE_ANIMATE:\r\n      return {\r\n        ...state,\r\n        doneAnimate: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE_VALUE:\r\n      return {\r\n        ...state,\r\n        animateValue: action.payload,\r\n      }\r\n    case AppActionTypes.SET_ANIMATE_TIME:\r\n      return {\r\n        ...state,\r\n        animateTime: action.payload,\r\n      }\r\n    case AppActionTypes.SET_HIDE_PROGRESS:\r\n      return {\r\n        ...state,\r\n        hideProgress: !state.hideProgress,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export const getRandomColor = (colorArray: string[]) => {\r\n  return colorArray[Math.floor(Math.random() * colorArray.length)]\r\n}\r\n\r\nexport const getParseInt = (value: string) => {\r\n  return parseInt(value, 10)\r\n}\r\n\r\nexport const getTime = (counter: number) => {\r\n  const min = Math.floor(counter / 60)\r\n  const sec = counter % 60 > 9 ? counter % 60 : `0${counter % 60}`\r\n\r\n  return { min, sec }\r\n}\r\n","import React, { createContext, useReducer } from 'react'\r\nimport { appReducer } from 'context/appReducer'\r\nimport { AppState, AppActionTypes } from 'context/types'\r\nimport { getRandomColor, getTime, getParseInt } from 'utils'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    intervalId: any\r\n    timeoutId: any\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  progress: 0,\r\n  timer: '0:00',\r\n  customValue: '',\r\n  startAnimate: false,\r\n  doneAnimate: false,\r\n  animateValue: '',\r\n  animateTime: 0,\r\n  hideProgress: false,\r\n  sizeRing: 250,\r\n  strokeWidth: 15,\r\n  strokeInner: '#fff',\r\n  strokeOuter: '#20b7ff',\r\n  defaultColor: '#20b7ff',\r\n  colorArray: [\r\n    '#7ea9e1',\r\n    '#ed004f',\r\n    '#00fcf0',\r\n    '#d2fc00',\r\n    '#7bff00',\r\n    '#fa6900',\r\n  ],\r\n}\r\n\r\ntype Context = {\r\n  state: AppState\r\n  onCustomValue?: (value: string) => void\r\n  onRandomValue?: () => void\r\n  onRandomColor?: (checked: boolean) => void\r\n  onAnimateValue?: (value: string) => void\r\n  onStartAnimate?: (checked: boolean) => void\r\n  onHideProgress?: () => void\r\n  finalCountdown?: () => void\r\n  resetProgress?: () => void\r\n}\r\n\r\nexport const AppContext = createContext<Context>({ state: initialState })\r\n\r\ninterface Provider {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const AppProvider: React.FC<Provider> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState)\r\n\r\n  const onCustomValue = (value: string) => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_CUSTOM_VALUE,\r\n      payload: value,\r\n    })\r\n\r\n    let integerValue = getParseInt(value)\r\n\r\n    if (integerValue && integerValue > 0) {\r\n      if (integerValue > 100) {\r\n        integerValue = 100\r\n      }\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: integerValue,\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onRandomValue = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_CUSTOM_VALUE,\r\n      payload: '',\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: Math.floor(Math.random() * 101),\r\n    })\r\n  }\r\n\r\n  const onRandomColor = (checked: boolean) => {\r\n    if (checked) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_COLOR,\r\n        payload: getRandomColor(state.colorArray),\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_COLOR,\r\n        payload: state.defaultColor,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onAnimateValue = (value: string) => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_VALUE,\r\n      payload: value,\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_TIME,\r\n      payload: getParseInt(value),\r\n    })\r\n\r\n    if (value) {\r\n      setTime(getParseInt(value))\r\n    } else {\r\n      setTime(0)\r\n    }\r\n  }\r\n\r\n  const onStartAnimate = (checked: boolean) => {\r\n    if (checked) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_CUSTOM_VALUE,\r\n        payload: '',\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_START_ANIMATE,\r\n        payload: true,\r\n      })\r\n    } else {\r\n      dispatch({\r\n        type: AppActionTypes.SET_PROGRESS,\r\n        payload: 0,\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_ANIMATE_TIME,\r\n        payload: getParseInt(state.animateValue),\r\n      })\r\n\r\n      dispatch({\r\n        type: AppActionTypes.SET_START_ANIMATE,\r\n        payload: false,\r\n      })\r\n\r\n      setTime(getParseInt(state.animateValue))\r\n    }\r\n  }\r\n\r\n  const onHideProgress = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_HIDE_PROGRESS,\r\n    })\r\n  }\r\n\r\n  const setTime = (value: number) => {\r\n    const time = getTime(value)\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_TIME,\r\n      payload: `${time.min}:${time.sec}`,\r\n    })\r\n  }\r\n\r\n  const finalCountdown = () => {\r\n    const startPoint = getParseInt(state.animateValue)\r\n    let counter = state.animateTime - 1\r\n    const progress = Math.ceil(((startPoint - counter) / startPoint) * 100)\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: progress,\r\n    })\r\n\r\n    setTime(counter)\r\n\r\n    if (counter === 0) {\r\n      dispatch({\r\n        type: AppActionTypes.SET_DONE_ANIMATE,\r\n        payload: true,\r\n      })\r\n    }\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_TIME,\r\n      payload: counter,\r\n    })\r\n  }\r\n\r\n  const resetProgress = () => {\r\n    dispatch({\r\n      type: AppActionTypes.SET_PROGRESS,\r\n      payload: 0,\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_ANIMATE_VALUE,\r\n      payload: '',\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_START_ANIMATE,\r\n      payload: false,\r\n    })\r\n\r\n    dispatch({\r\n      type: AppActionTypes.SET_DONE_ANIMATE,\r\n      payload: false,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        state,\r\n        onCustomValue,\r\n        onRandomValue,\r\n        onRandomColor,\r\n        onAnimateValue,\r\n        onStartAnimate,\r\n        onHideProgress,\r\n        resetProgress,\r\n        finalCountdown,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n","import React, { useEffect, useContext, useState } from 'react'\r\nimport { AppContext } from 'context/AppState'\r\nimport 'components/ProgressPanel/ProgressPanel.scss'\r\n\r\nconst ProgressPanel: React.FC = () => {\r\n  const [offset, setOffset] = useState<number>(0)\r\n  const { state } = useContext(AppContext)\r\n  const {\r\n    progress,\r\n    timer,\r\n    doneAnimate,\r\n    animateValue,\r\n    sizeRing,\r\n    strokeInner,\r\n    strokeOuter,\r\n    strokeWidth,\r\n    hideProgress,\r\n  } = state\r\n\r\n  const center = sizeRing / 2\r\n  const radius = sizeRing / 2 - strokeWidth / 2\r\n  const circumference = 2 * Math.PI * radius\r\n\r\n  useEffect(() => {\r\n    const progressOffset = ((100 - progress) / 100) * circumference\r\n    setOffset(progressOffset)\r\n  }, [progress, circumference, offset, setOffset])\r\n\r\n  return (\r\n    <div className={hideProgress ? 'progress progress_hide' : 'progress'}>\r\n      <div className='progress__block' style={{ width: `${sizeRing}px` }}>\r\n        <span\r\n          className='progress__done'\r\n          style={doneAnimate ? { opacity: '1' } : {}}\r\n        >\r\n          Done!\r\n        </span>\r\n        <svg className='progress__ring' width={sizeRing} height={sizeRing}>\r\n          <circle\r\n            className='progress__inner'\r\n            stroke={strokeInner}\r\n            strokeWidth={strokeWidth}\r\n            cx={center}\r\n            cy={center}\r\n            r={radius}\r\n          />\r\n          <circle\r\n            className='progress__outer'\r\n            stroke={strokeOuter}\r\n            strokeWidth={strokeWidth}\r\n            strokeDasharray={circumference}\r\n            strokeDashoffset={offset}\r\n            cx={center}\r\n            cy={center}\r\n            r={radius}\r\n            transform={`rotate(-90, ${center}, ${center})`}\r\n          />\r\n          <text className='progress__percent' x={`${center}`} y={`${center}`}>\r\n            {progress}%\r\n          </text>\r\n        </svg>\r\n        <span\r\n          className='progress__timer'\r\n          style={\r\n            animateValue && Number(animateValue) !== 0 ? { opacity: '1' } : {}\r\n          }\r\n        >\r\n          {timer}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressPanel\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { AppContext } from 'context/AppState'\r\nimport 'components/ControlPanel/ControlPanel.scss'\r\n\r\nconst ControlPanel: React.FC = () => {\r\n  const {\r\n    state,\r\n    onCustomValue,\r\n    onRandomValue,\r\n    onRandomColor,\r\n    onAnimateValue,\r\n    onStartAnimate,\r\n    onHideProgress,\r\n    finalCountdown,\r\n    resetProgress,\r\n  } = useContext(AppContext)\r\n  const {\r\n    customValue,\r\n    startAnimate,\r\n    animateValue,\r\n    animateTime,\r\n    hideProgress,\r\n    doneAnimate,\r\n  } = state\r\n\r\n  useEffect(() => {\r\n    if (startAnimate && animateTime !== 0) {\r\n      window.intervalId = setInterval(() => {\r\n        finalCountdown!()\r\n      }, 1000)\r\n    } else {\r\n      clearInterval(window.intervalId)\r\n    }\r\n\r\n    return () => clearInterval(window.intervalId)\r\n    // eslint-disable-next-line\r\n  }, [startAnimate, animateTime])\r\n\r\n  useEffect(() => {\r\n    if (doneAnimate) {\r\n      window.timeoutId = setTimeout(() => {\r\n        resetProgress!()\r\n      }, 3000)\r\n    } else {\r\n      clearTimeout(window.timeoutId)\r\n    }\r\n\r\n    return () => clearTimeout(window.timeoutId)\r\n    // eslint-disable-next-line\r\n  }, [doneAnimate])\r\n\r\n  return (\r\n    <div className='control'>\r\n      <label className='control__label'>\r\n        <input\r\n          className='control__input'\r\n          onChange={(event) => onCustomValue!(event.target.value)}\r\n          value={customValue}\r\n          type='number'\r\n          placeholder='0'\r\n          disabled={startAnimate || hideProgress}\r\n        />\r\n        Custom value\r\n      </label>\r\n      <div className='control__block'>\r\n        <button\r\n          className='control__button'\r\n          onClick={onRandomValue}\r\n          disabled={startAnimate || hideProgress}\r\n        ></button>\r\n      </div>\r\n      <label className='control__label'>\r\n        <input\r\n          onChange={(event) => onRandomColor!(event.target.checked)}\r\n          type='checkbox'\r\n          disabled={hideProgress}\r\n        />\r\n        Random color\r\n      </label>\r\n      <div className='control__block'>\r\n        <label className='control__label'>\r\n          <input\r\n            className='control__input'\r\n            onChange={(event) => onAnimateValue!(event.target.value)}\r\n            value={animateValue}\r\n            type='number'\r\n            placeholder='0'\r\n            disabled={startAnimate || hideProgress}\r\n          />\r\n          Seconds\r\n        </label>\r\n        <label className='control__label'>\r\n          <input\r\n            onChange={(event) => onStartAnimate!(event.target.checked)}\r\n            type='checkbox'\r\n            checked={startAnimate}\r\n            disabled={\r\n              !animateValue || Number(animateValue) === 0 || hideProgress\r\n            }\r\n          />\r\n          Animate\r\n        </label>\r\n      </div>\r\n      <label className='control__label'>\r\n        <input\r\n          onChange={onHideProgress}\r\n          type='checkbox'\r\n          checked={hideProgress}\r\n          disabled={startAnimate}\r\n        />\r\n        Hide progress\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ControlPanel\r\n","import React from 'react'\nimport ProgressPanel from 'components/ProgressPanel/ProgressPanel'\nimport ControlPanel from 'components/ControlPanel/ControlPanel'\nimport 'App.scss'\n\nconst App: React.FC = () => {\n  return (\n    <div className='app'>\n      <ProgressPanel />\n      <ControlPanel />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import ReactDOM from 'react-dom'\nimport { AppProvider } from 'context/AppState'\nimport App from 'App'\nimport reportWebVitals from 'reportWebVitals'\nimport 'index.scss'\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}